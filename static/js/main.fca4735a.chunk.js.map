{"version":3,"sources":["Welcome.js","WebSocket.js","Controller.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","icon","react_default","a","createElement","class","message","Component","socket","SockJS","ws","Stomp","over","WebSocket","_this","state","command","timeStamp","Date","now","connectionHandler","console","log","initiate_con","params","_this2","webSoc","connect","frame","con","onopen","setTimeout","sendMessage","username","window","onmessage","body","data","commandMsg","setState","commandHandler","msg","send","JSON","stringify","Controller","prevMsg","feedback","handleCommand","bind","assertThisInitialized","payload","special_icon","toUpperCase","src_WebSocket","src_Welcome","App","className","src","height","width","src_Controller","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAmCeA,cA9BX,SAAAA,EAAYC,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACTH,0EAON,IAAIO,EASJ,OAPIA,EADoB,OAApBJ,KAAKH,MAAMO,KACHC,EAAAC,EAAAC,cAAA,QAAMC,MAAM,wBACM,UAApBR,KAAKH,MAAMO,KACTC,EAAAC,EAAAC,cAAA,QAAMC,MAAM,wBAEbH,EAAAC,EAAAC,cAAA,aAIPF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,6BACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACXH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,aAAaR,KAAKH,MAAMY,QAEjCL,YAxBKM,+CCChBC,EAASC,IAAO,wCAChBC,EAAKC,IAAMC,KAAKJ,GAsEPK,cAlEX,SAAAA,EAAYnB,GAAM,IAAAoB,EAAA,OAAAnB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACdC,EAAAnB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMH,KAKVqB,MAAQ,CACJP,SACAE,KACAM,QAAQ,OACRC,UAAUC,KAAKC,OAVDL,EA+ClBM,kBAAoB,WAChBC,QAAQC,IAAI,kCAhDER,mFAcdjB,KAAK0B,aAAa,6CAGTC,GAAO,IAAAC,EAAA5B,KACV6B,EAAS7B,KAAKkB,MAAML,GAC1BgB,EAAOC,QAAQ,GAAI,SAASC,GACxBP,QAAQC,IAAI,8BAEhBD,QAAQC,IAAII,GACZ,IAAMG,EAAMhC,KAAKkB,MAAMP,OACvBqB,EAAIC,OAAU,WACVT,QAAQC,IAAI,aACZS,WAAW,WACPN,EAAKO,YAAY,CAACC,SAAWC,OAAM,WACpC,MAGPL,EAAIM,UAAY,SAACC,GAEb,GADAf,QAAQC,IAAIc,EAAKC,MACbD,EAAKC,gBAAgB1C,QAAU,YAAayC,EAAKC,KAAM,CACvDhB,QAAQC,IAAIc,EAAKC,KAAKrB,SACtB,IAAMsB,EAAaF,EAAKC,KAAKrB,QAC7BS,EAAKc,SAAS,CAACvB,QAAQsB,IACvBb,EAAKc,SAAS,CAAEtB,UAAWC,KAAKC,QAChCE,QAAQC,IAAI,0BACZG,EAAK/B,MAAM8C,eAAeJ,EAAKC,4CAa/BI,GACR5C,KAAKkB,MAAML,GAAGgC,KAAKC,KAAKC,UAAU,CAACtC,QAAUmC,4EAQ7B5C,KAAKkB,MAAMC,QAC3B,OAAQd,EAAAC,EAAAC,cAAA,oBAhEQG,aC8CTsC,cA/CX,SAAAA,EAAYnD,GAAM,IAAAoB,EAAA,OAAAnB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IACd/B,EAAAnB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,KAAMH,KAKVqB,MAAQ,CACJC,QAAU,UACVV,QAAU,kDACVwC,QAAU,GACVC,SAAU,IARVjC,EAAKkC,cAAgBlC,EAAKkC,cAAcC,KAAnBtD,OAAAuD,EAAA,EAAAvD,QAAAuD,EAAA,EAAAvD,CAAAmB,KAFPA,6EAYJqC,GAAQ,IAAA1B,EAAA5B,KAClBwB,QAAQC,IAAI,2BACZ,IAAMgB,EAAaa,EAAQnC,QACrBoC,EAAeD,EAAQJ,SAE7B1B,QAAQC,IAAI,mBAAmBgB,EAAWe,cAAc,sBAAsBxD,KAAKkB,MAAMC,QAAQqC,eAChE,YAA7Bf,EAAWe,eAA4D,SAA7Bf,EAAWe,eACZ,YAArCxD,KAAKkB,MAAMC,QAAQqC,eAAoE,SAArCxD,KAAKkB,MAAMC,QAAQqC,gBACrExD,KAAK0C,SAAS,CAACO,QAAQjD,KAAKkB,MAAMC,UAClCnB,KAAK0C,SAAS,CAACQ,SAASK,IACxB/B,QAAQC,IAAI,4BAA4BzB,KAAKkB,MAAM+B,QAAQ,yBAAyBjD,KAAKkB,MAAMgC,WAEnGhB,WAAW,WACPN,EAAKc,SAAS,CAACjC,QAAQgC,KACxB,MAGHzC,KAAK0C,SAAS,CAACvB,QAAQsB,qCAM3B,OACIpC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAACkD,EAAD,CAAWd,eAAgB3C,KAAKmD,gBAChC9C,EAAAC,EAAAC,cAACmD,EAAD,CAASjD,QAAST,KAAKkB,MAAMT,QAASL,KAAMJ,KAAKkB,MAAMgC,mBAxC9CxC,aCcViD,mLAXX,OACEtD,EAAAC,EAAAC,cAAA,OAAKqD,UAAU,OACXvD,EAAAC,EAAAC,cAAA,OAAKsD,IAAI,iBAAkBC,OAAO,KAAKC,MAAM,SAG7C1D,EAAAC,EAAAC,cAACyD,EAAD,cAPQtD,aCOEuD,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fca4735a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Welcome extends Component{\n\n    constructor(props){\n        super(props);\n\n    }\n    \n\n\n    render(){\n        var icon;\n        if (this.props.icon === \"OK\") {\n            icon =  <span class=\"fas fa-check-square\"></span>\n        } else if(this.props.icon === \"WRONG\") {\n            icon =  <span class=\"fas fa-times-circle\"></span>\n        } else {\n            icon = <span/>\n        }\n\n        return (\n            <div class=\"jumbotron jumbotron-fluid\">\n                <div class=\"container\">\n                <h1 class=\"display-4\">{this.props.message}\n                \n                {icon}</h1>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Welcome;","import React, { Component } from 'react';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\n\nconst socket = SockJS(\"https://msleia.herokuapp.com/command\");\nconst ws = Stomp.over(socket);\n\nclass WebSocket extends Component{\n\n    constructor(props){\n        super(props);\n        // this.initiate_con = this.initiate_con.bind(this);\n        // this.sendMessage = this.sendMessage.bind(this);\n        // this.connectionHandler = this.connectionHandler.bind(this);\n    }\n    state = {\n        socket,\n        ws,\n        command:\"init\",\n        timeStamp:Date.now()\n    };\n\n    componentDidMount() {\n        this.initiate_con(\"init\");   \n    }\n\n    initiate_con(params){\n        const webSoc = this.state.ws;\n        webSoc.connect({}, function(frame) {\n            console.log(\"Please chal ja mere bhai\")\n        });\n        console.log(webSoc);\n        const con = this.state.socket;\n        con.onopen =  () => {\n            console.log(\"Connected\");\n            setTimeout(()=>{\n                this.sendMessage({\"username\":window[\"msluser\"]});\n            }, 5000);\n            \n        };\n        con.onmessage = (body) => {\n            console.log(body.data)\n            if (body.data instanceof Object && 'command' in body.data) {\n                console.log(body.data.command)\n                const commandMsg = body.data.command;\n                this.setState({command:commandMsg});\n                this.setState({ timeStamp: Date.now()});\n                console.log(\"calling hander:.......\")\n                this.props.commandHandler(body.data);\n            }\n        };\n        \n        // webSoc.subscribe(\"http://localhost:8080/command\")\n\n    };\n\n    connectionHandler = ()=>{\n        console.log(\"I am hereer!!!!!!!!!!!!!!!!!!\");\n        // console.log(con);\n        // this.state.ws.send(\"/command\", {priority: 9}, \"Hello, STOMP\");\n    }\n    sendMessage(msg){\n        this.state.ws.send(JSON.stringify({\"message\":msg}))\n    }\n\n    receiveMsg(){\n\n    }\n\n    render() {\n        const command = this.state.command;\n        return (<span />);\n    }\n}\n\nexport default WebSocket;\n","import React, { Component } from 'react';\nimport Welcome  from './Welcome'\nimport WebSocket from './WebSocket'\n\nclass Controller extends Component{\n\n    constructor(props){\n        super(props);\n        this.handleCommand = this.handleCommand.bind(this);\n        \n    }\n    \n    state = {\n        command : \"WELCOME\",\n        message : \"Hi! This is Leia. What would you like to Learn?\",\n        prevMsg : \"\",\n        feedback: \"\"\n    };\n    handleCommand(payload){\n        console.log(\"Entering handle command\");\n        const commandMsg = payload.command;\n        const special_icon = payload.feedback;\n        \n        console.log(\"new command is: \"+commandMsg.toUpperCase()+\". Old Command was: \"+this.state.command.toUpperCase());\n        if (commandMsg.toUpperCase() !== \"WELCOME\" && commandMsg.toUpperCase() !== \"INIT\"){\n            if (this.state.command.toUpperCase() !== \"WELCOME\" && this.state.command.toUpperCase() !== \"INIT\"){\n                this.setState({prevMsg:this.state.command});\n                this.setState({feedback:special_icon});\n                console.log(\"setting prev message to: \"+this.state.prevMsg+\" and feedback icon to \"+this.state.feedback);\n            }\n            setTimeout(() => {\n                this.setState({message:commandMsg});\n            }, 1000);\n            \n        } else {\n            this.setState({command:commandMsg});\n        }\n    }\n    render(){\n        \n        \n        return (\n            <div class=\"container\">\n                <WebSocket commandHandler={this.handleCommand}/>\n                <Welcome message={this.state.message} icon={this.state.feedback}/>\n            </div>\n        )\n        \n        \n    }\n\n}\n\nexport default Controller;","import React, { Component } from 'react';\nimport './App.css';\nimport Controller from './Controller'\n// import ChromeCast from './ChromeCast';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <img src=\"abc_banner.jpg\"  height=\"1%\" width=\"100%\"/>\n          {/* <WebSocket/> */}\n          {/* <ChromeCast /> */}\n          <Controller />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}